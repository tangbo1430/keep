package 双指针

// 给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。
//
//找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
//
//返回容器可以储存的最大水量。

// 输入：[1,8,6,2,5,4,8,3,7]
//输出：49
//解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。

// 输入：height = [1,1]
//输出：1

// 思路：就两步，
// 1.求出当前双指针对应的容器的容量；
// 2.对应数字较小的那个指针以后不可能作为容器的边界了，将其丢弃，并移动对应的指针。

func maxArea(height []int) int {
	l, r := 0, len(height)-1
	ans := 0
	for l < r {
		// 较矮的一侧，成底边长
		area := min(height[l], height[r]) * (r - l)
		ans = max(ans, area)
		if height[l] <= height[r] {
			l++
		} else {
			r--
		}
	}
	return ans
}
