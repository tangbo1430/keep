package 双指针

// 对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。
// 然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。
// 如果这个过程 结果为 1，那么这个数就是快乐数。
// 如果 n 是 快乐数 就返回 true ；不是，则返回 false 。
// 输入：n = 19
//输出：true
//解释：
//1^2 + 9^2 = 82
//8^2 + 2^2 = 68
//6^2 + 8^2 = 100
//1^2 + 0^2 + 02 = 1
// 阔以看作是链表
// 示例 2：
//
//输入：n = 2
//输出：false

// 思路，快慢指针，我们不是只跟踪链表中的一个值，而是跟踪两个值，称为快跑者和慢跑者。在算法的每一步中，慢速在链表中前进 1 个节点，快跑者前进 2 个节点（对 getNext(n) 函数的嵌套调用）。
//
// 如果 n 是一个快乐数，即没有循环，那么快跑者最终会比慢跑者先到达数字 1。
//
// 如果 n 不是一个快乐的数字，那么最终快跑者和慢跑者将在同一个数字上相遇。

// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
func isHappy(n int) bool {
	slow, fast := n, getNext(n) // fast先走一步
	for fast != 1 && fast != slow {
		slow = getNext(slow)
		fast = getNext(getNext(fast))
	}
	return fast == 1
}

func getNext(n int) int {
	sum := 0
	for n > 0 {
		sum += (n % 10) * (n % 10)
		n = n / 10
	}
	return sum
}
