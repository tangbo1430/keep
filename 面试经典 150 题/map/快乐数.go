package _map

// 对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。
// 然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。
// 如果这个过程 结果为 1，那么这个数就是快乐数。
// 如果 n 是 快乐数 就返回 true ；不是，则返回 false 。
// 输入：n = 19
//输出：true
//解释：
//1^2 + 9^2 = 82
//8^2 + 2^2 = 68
//6^2 + 8^2 = 100
//1^2 + 0^2 + 02 = 1
// 阔以看作是链表
// 示例 2：
//
//输入：n = 2
//输出：false

// 其实题目的意思，你可以理解是一条链表，找链表会不会走到1，如果不能走到1就会走到重复的节点上
// 能走到1的就是一条普通链表，不能走到1的就是环形链表
// 记住走过的路就行了，如果发现走到重复节点上，就返回了
func isHappy(n int) bool {
	seen := make(map[int]bool)
	for n != 1 && !seen[n] {
		seen[n] = true
		n = getNext(n)
	}
	return n == 1
}

func getNext(n int) int {
	sum := 0
	for n > 0 {
		sum += (n % 10) * (n % 10)
		n = n / 10
	}
	return sum
}
